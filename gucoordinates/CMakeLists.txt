#
# Auto-generated cmake build file for gucoordinates
#
cmake_minimum_required(VERSION 3.15.0)
project(gucoordinates C CXX)
enable_testing()
find_package(gu_util CONFIG REQUIRED)
find_package(guunits CONFIG REQUIRED)
include( GNUInstallDirs )
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
add_compile_definitions()
include_directories($<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/./ $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/gucoordinates> ../../../Common $<BUILD_INTERFACE:/include/gu_util> $<INSTALL_INTERFACE:include/gu_util> /usr/local/include/gu_util $<BUILD_INTERFACE:/include/guunits> $<INSTALL_INTERFACE:include/guunits> /usr/local/include/guunits /usr/local/include)
link_directories(/usr/local/lib)
add_library(libgucoordinates SHARED CameraCPP.cc CameraCoordinate.cc CameraPivot.cc CartesianCoordinate.cc FieldCoordinate.cc PercentCoordinate.cc PixelCoordinate.cc RelativeCoordinate.cc camera.c camera_coordinate.c camera_pivot.c cartesian_coordinate.c conversions.c field_coordinate.c optional_camera_coordinate.c optional_cartesian_coordinate.c optional_field_coordinate.c optional_percent_coordinate.c optional_pixel_coordinate.c optional_relative_coordinate.c percent_coordinate.c pixel_coordinate.c relative_coordinate.c)
add_library(libgucoordinatesStatic STATIC CameraCPP.cc CameraCoordinate.cc CameraPivot.cc CartesianCoordinate.cc FieldCoordinate.cc PercentCoordinate.cc PixelCoordinate.cc RelativeCoordinate.cc camera.c camera_coordinate.c camera_pivot.c cartesian_coordinate.c conversions.c field_coordinate.c optional_camera_coordinate.c optional_cartesian_coordinate.c optional_field_coordinate.c optional_percent_coordinate.c optional_pixel_coordinate.c optional_relative_coordinate.c percent_coordinate.c pixel_coordinate.c relative_coordinate.c)
set_target_properties(libgucoordinates PROPERTIES OUTPUT_NAME gucoordinates)
set_target_properties(libgucoordinatesStatic PROPERTIES OUTPUT_NAME gucoordinates)
set_property(TARGET libgucoordinates PROPERTY POSITION_INDEPENDENT_CODE 1)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;/usr/local/lib")
target_include_directories(libgucoordinates INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/./ $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/gucoordinates>)
target_include_directories(libgucoordinates PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/gucoordinates>)
target_link_libraries(libgucoordinates gu_util guunits)
include(CMakePackageConfigHelpers)
configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in "${CMAKE_CURRENT_BINARY_DIR}/gucoordinatesConfig.cmake" INSTALL_DESTINATION "lib/cmake/gucoordinates" NO_SET_AND_CHECK_MACRO NO_CHECK_REQUIRED_COMPONENTS_MACRO )
write_basic_package_version_file( "${CMAKE_CURRENT_BINARY_DIR}/gucoordinatesConfigVersion.cmake" VERSION "1.0" COMPATIBILITY AnyNewerVersion )
install(TARGETS libgucoordinates libgucoordinatesStatic DESTINATION lib EXPORT gucoordinates)
install(FILES Camera.hpp CameraCoordinate.hpp CameraPivot.hpp CartesianCoordinate.hpp FieldCoordinate.hpp OptionalCameraCoordinate.hpp OptionalCartesianCoordinate.hpp OptionalCoordinate.hpp OptionalFieldCoordinate.hpp OptionalPercentCoordinate.hpp OptionalPixelCoordinate.hpp OptionalRelativeCoordinate.hpp PercentCoordinate.hpp PixelCoordinate.hpp RelativeCoordinate.hpp camera.h camera_coordinate.h camera_pivot.h cartesian_coordinate.h conversions.h field_coordinate.h gucoordinates.h hidden_conversions.h optional_camera_coordinate.h optional_cartesian_coordinate.h optional_field_coordinate.h optional_percent_coordinate.h optional_pixel_coordinate.h optional_relative_coordinate.h percent_coordinate.h pixel_coordinate.h relative_coordinate.h DESTINATION include/gucoordinates)
install(EXPORT gucoordinates FILE gucoordinates.cmake DESTINATION lib/cmake/gucoordinates )
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/gucoordinatesConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/gucoordinatesConfigVersion.cmake DESTINATION lib/cmake/gucoordinates )
export(EXPORT gucoordinates FILE "${CMAKE_CURRENT_BINARY_DIR}/gucoordinates.cmake" )
